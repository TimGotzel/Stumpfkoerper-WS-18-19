%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Flo\Documents\GitHub\Stumpfkoerper-WS-18-19\4_Messung\Projektarbeit_WS_18_19\Daten\Referenzkonfig\Aktuation\0kPa\0rpm.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/01/09 17:43:32

%% Initialize variables.
filename = 'C:\Users\Flo\Documents\GitHub\Stumpfkoerper-WS-18-19\4_Messung\Projektarbeit_WS_18_19\Daten\Referenzkonfig\Aktuation\0kPa\500rpm.txt';
delimiter = '\t';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\.]*)+[\,]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\.]*)*[\,]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains('.')
                thousandsRegExp = '^[-/+]*\d+?(\.\d{3})*\,{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = strrep(numbers, '.', '');
                numbers = strrep(numbers, ',', '.');
                numbers = textscan(char(numbers), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Create output variable
pressure_raw2 = cell2mat(raw);

pressure = mean(pressure_raw2);

%function [Cw] = wake(pressure)

%%separate pressures
total_pressure = pressure(1:22);
static_pressure = pressure(28:32);

%%positions as designed
position_pitot = 0:9:9*21;
position_prandtl = [0:40:160] + 14,5;

% fit total pressure
%data = total_pressure;
%pos = position_pitot;
%[~,id] = min(data);
%middle = pos(id);
%beta = [0.001, -0.001, min(data),max(data), -middle];
%formula1 = @(beta,x) (1+beta(1).*(x+beta(5)).^2).*exp(beta(2).*(x+beta(5)).^2) * (beta(3) - beta(4)) + beta(4);
% fit total pressure
data = [total_pressure(22), total_pressure];
pos = [position_pitot(22) + 100, position_pitot];
[~,id] = min(data);
middle = pos(id);

% original
beta = [0.001,-0.001,min(data),max(data),-middle];
formula1 = @(beta,x) (1+beta(1).*(x+beta(5)).^2) .* exp(beta(2).*(x+beta(5)).^2) * (beta(3) - beta(4)) + beta(4);

[beta1,R1,~,~,~,~] = nlinfit(pos,data,formula1,beta);

%%Fit static pressure
%data = static_pressure;
%pos = position_prandtl;
%beta = [min(data),max(data),beta1(5)];
%formula2 = @(beta,x) (1+beta1(1).*(x+beta(3)).^2).*exp(beta1(2).*(x+beta(3)).^2) * (beta(1) - beta(2)) + beta(2);

data = [static_pressure(1), static_pressure];
pos = [position_prandtl(1) - 100, position_prandtl];
beta = [min(data),max(data),beta1(5)];
formula2 = @(beta,x) (1+beta1(1).*(x+beta(3)).^2) .* exp(beta1(2).*(x+beta(3)).^2) * (beta(1) - beta(2)) + beta(2);
[beta2,R2,~,~,~,~] = nlinfit(pos,data,formula2,beta);

disp(beta1)
disp(beta2)

%%Calculate Cd
    %%dyn_pressure_fs entspricht q_infty
dyn_pressure_fs= beta1(4) - beta2(2);
    %%static_pressure_fs entspricht p_infty
static_pressure_fs = beta2(2);
ref_length = 0.0534;
    
    %%siehe Formel 4.10 im Bericht
fun = @(x) (2 * sqrt((formula1(beta1,(x-beta1(5))) - formula2(beta2,(x-beta2(3)))) / dyn_pressure_fs) .* (1- sqrt((formula1(beta1,(x-beta1(5))) - static_pressure_fs) / dyn_pressure_fs)));
Cd = integral(fun,-max(position_prandtl),max(position_prandtl))/1000/ref_length

%%plot
x = linspace (-max(position_prandtl),max(position_prandtl),101);
ref_length = ref_length * 1000;
x_plot = x / ref_length;
position_pitot_plot = (position_pitot + beta1(5))/ref_length;
position_prandtl_plot = (position_prandtl + beta2(3))/ref_length;

figure()
plot(position_pitot_plot,total_pressure, 'x',position_prandtl_plot,static_pressure,'x',x_plot,formula1(beta1,(x-beta1(5))),x_plot,formula2(beta2,(x-beta2(3))))

%title(['Cw:_',num2str(
ylabel('\Delta p [Pa]')
xlabel('y/d [-]')
set(gca,'box','on')
legend('p_t Daten', 'p Daten', 'p_t Verauf (fit)' , 'p Verlauf (fit)', 'location', 'northeastoutside')

%% correct rake errors
load('rake_correction.mat')
corrected_static = zeros(1,5);
for i = 1 : 5
    local_total_pressure = formula1(beta1,position_prandtl(i));
    corrected_static(i) = static_pressure(i) - polyval(fit_static(i,:),local_total_pressure-static_pressure(i));
end

% fit static pressure
data = corrected_static;
pos = position_prandtl;
beta = [beta1(2), min(data),beta1(5)];
formula2 = @(beta,x) exp(beta(1).*(x+beta(3)).^2) * beta(2);
[beta2,R2,~,~,~,~] = nlinfit(pos,data,formula2,beta);

% % fit static pressure
% data = corrected_static;
% pos = position_prandtl;
% beta = [min(data),max(data),beta1(5)];
% formula2 = @(beta,x) (1+beta1(1).*(x+beta(3)).^2) .* exp(beta1(2).*(x+beta(3)).^2) * (beta(1) - beta(2)) + beta(2);
% [beta2,R2,~,~,~,~] = nlinfit(pos,data,formula2,beta);

corrected_total = total_pressure; %- polyval(fit_total,total_pressure - formula2(beta2,position_pitot));

% % fit total pressure
% data = corrected_total;
% pos = position_pitot;
% [~,id] = min(data);
% middle = pos(id);
% beta = [0.001,-0.001,min(data),max(data),-middle];
% formula1 = @(beta,x) (1+beta(1).*(x+beta(5)).^2) .* exp(beta(2).*(x+beta(5)).^2) * (beta(3) - beta(4)) + beta(4);
% [beta1,R1,~,~,~,~] = nlinfit(pos,data,formula1,beta);

% calculate Cd
dyn_pressure_fs = beta1(4);
static_pressure_fs = 0;
ref_length = 0.0534;

% % calculate Cd
% dyn_pressure_fs = beta1(4) - beta2(2);
% static_pressure_fs = beta2(2);
% ref_length = 0.0534;

fun = @(x) (2 * sqrt((formula1(beta1,(x-beta1(5))) - formula2(beta2,(x-beta2(3)))) / dyn_pressure_fs) .* (1 - sqrt((formula1(beta1,(x-beta1(5))) - static_pressure_fs) / dyn_pressure_fs)));
Cd_corrected = integral(fun,-max(position_prandtl),max(position_prandtl))/1000/ref_length;

disp('Cd')
disp(Cd)
disp('Cd_corrected')
disp(Cd_corrected)

% plot
x = linspace(-max(position_prandtl),max(position_prandtl),101);
ref_length = ref_length * 1000;
x_plot = x / ref_length;
position_pitot_plot = (position_pitot + beta1(5))/ref_length;
position_prandtl_plot = (position_prandtl + beta2(3))/ref_length;

hold on
plot(position_pitot_plot,total_pressure,'x',position_prandtl_plot,corrected_static,'x',x_plot,formula1(beta1,(x-beta1(5))),x_plot,formula2(beta2,(x-beta2(3))))


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp;