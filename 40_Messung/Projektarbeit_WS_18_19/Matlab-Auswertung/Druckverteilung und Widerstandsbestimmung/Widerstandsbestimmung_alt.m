%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Flo\Documents\GitHub\Stumpfkoerper-WS-18-19\4_Messung\Projektarbeit_WS_18_19\Daten\Walzenpaar 50\Aktuation\1kPa\2500 rpm\1kPa2500rpm_03.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/01/09 14:03:01

%% Initialize variables.
filename = 'C:\Users\Flo\Documents\GitHub\Stumpfkoerper-WS-18-19\4_Messung\Projektarbeit_WS_18_19\Daten\Walzenpaar 50\Aktuation\4kPa\2500 rpm\4kPa_2500rpm_03.txt';
delimiter = '\t';
startRow = 11;

%% Format for each line of text:
%   column2: double (%f)
%	column3: double (%f)
%   column4: double (%f)
%	column5: double (%f)
%   column6: double (%f)
%	column7: double (%f)
%   column8: double (%f)
%	column9: double (%f)
%   column10: double (%f)
%	column11: double (%f)
%   column12: double (%f)
%	column13: double (%f)
%   column14: double (%f)
%	column15: double (%f)
%   column16: double (%f)
%	column17: double (%f)
%   column18: double (%f)
%	column19: double (%f)
%   column20: double (%f)
%	column21: double (%f)
%   column22: double (%f)
%	column23: double (%f)
%   column24: double (%f)
%	column25: double (%f)
%   column26: double (%f)
%	column27: double (%f)
%   column28: double (%f)
%	column29: double (%f)
%   column30: double (%f)
%	column31: double (%f)
%   column32: double (%f)
%	column33: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
pressure_raw = [dataArray{1:end-1}];
pressure = mean(pressure_raw);

%function [Cw] = wake(pressure)

%%separate pressures
total_pressure = pressure(1:22);
static_pressure = pressure(28:32);

%%positions as designed
position_pitot = [0:9:9*21];
position_prandtl = [0:40:160];

% fit total pressure
data = total_pressure;
pos = position_pitot;
[~,id] = min(data);
middle = pos(id);
beta = [0.001, -0.001, min(data),max(data), -middle];
formula1 = @(beta,x) (1+beta(1).*(x+beta(5)).^2).*exp(beta(2).*(x+beta(5)).^2) * (beta(3) - beta(4)) + beta(4);
beta1 = nlinfit(pos,data,formula1,beta);

%%Fit static pressure
data = static_pressure;
pos = position_prandtl;
beta = [min(data),max(data),beta1(5)];
formula2 = @(beta,x) (1+beta1(1).*(x+beta(3)).^2).*exp(beta1(2).*(x+beta(3)).^2) * (beta(1) - beta(2)) + beta(2);
beta2 = nlinfit(pos,data,formula2,beta);


%%Calculate Cd
    %%dyn_pressure_fs entspricht q_infty
dyn_pressure_fs= beta1(4) - beta2(2);
    %%static_pressure_fs entspricht p_infty
static_pressure_fs = beta2(2);
ref_length = 0.0534;
    
    %%siehe Formel 4.10 im Bericht
fun = @(x) (2 * sqrt((formula1(beta1,x) - formula2(beta2,x)) / dyn_pressure_fs) .* (1- sqrt((formula1(beta1,x) - static_pressure_fs) / dyn_pressure_fs)));
Cd = integral(fun,min(position_prandtl),max(position_prandtl))/1000/ref_length

%%plot
x = linspace (min(position_pitot),max(position_pitot),1001);
ref_length = ref_length * 1000;
x_plot = (x + beta1(5)) / ref_length;
position_pitot_plot = (position_pitot + beta1(5))/ref_length;
position_prandtl_plot = (position_prandtl + beta1(5))/ref_length;

figure()
plot(position_pitot_plot,total_pressure, 'x',position_prandtl_plot,static_pressure,'x',x_plot,formula1(beta1,x),x_plot,formula2(beta2,x))

%title(['Cw:_',num2str(
ylabel('p [Pa]')
xlabel('y/d [Pa]')
set(gca,'box','on')
legend('p_t Daten', 'p Daten', 'p_t Verauf (fit)' , 'p Verlauf (fit)', 'location', 'northeastoutside')
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%end